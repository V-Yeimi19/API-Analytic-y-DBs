version: '3.8'

services:
  # üîÅ Servicio de Ingesta (conecta a BDs remotas de otros microservicios)
  ingesta:
    build:
      context: ./services/ingesta
      dockerfile: Dockerfile
    container_name: ingesta_production
    environment:
      - ENV_MODE=production
      - AWS_REGION=${AWS_DEFAULT_REGION}
      - S3_BUCKET=${S3_BUCKET}
      # Conexiones a bases de datos remotas de otros microservicios
      - MYSQL_HOST=${MYSQL_HOST_REMOTE}
      - MYSQL_PORT=${MYSQL_PORT_REMOTE:-3306}
      - MYSQL_USER=${MYSQL_USER_REMOTE}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD_REMOTE}
      - MYSQL_DATABASE=${MYSQL_DATABASE_REMOTE}
      - POSTGRES_HOST=${POSTGRES_HOST_REMOTE}
      - POSTGRES_PORT=${POSTGRES_PORT_REMOTE:-5432}
      - POSTGRES_USER=${POSTGRES_USER_REMOTE}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_REMOTE}
      - POSTGRES_DB=${POSTGRES_DB_REMOTE}
      - CASSANDRA_HOST=${CASSANDRA_HOST_REMOTE}
      - CASSANDRA_PORT=${CASSANDRA_PORT_REMOTE:-9042}
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE_REMOTE}
    env_file:
      - .env
    networks:
      - primac_net
    restart: on-failure

  # üìä API Anal√≠tica (lee desde S3)
  analytics_api:
    build:
      context: ./services/data_science_api
      dockerfile: Dockerfile
    container_name: analytics_api_production
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - primac_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üåê Balanceador de carga (Nginx)
  load_balancer:
    image: nginx:latest
    container_name: nginx_lb_production
    depends_on:
      analytics_api:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./load_balancer/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - primac_net
    restart: always

networks:
  primac_net:
    driver: bridge
